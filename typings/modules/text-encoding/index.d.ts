// Generated by typings
// Source: https://raw.githubusercontent.com/nozzlegear/text-encoding.d.ts/783f1ebda1085a9cadd73c1e6438565e6a8868a8/text-encoding.d.ts
declare module 'text-encoding' {
// Type definitions for text-encoding
// Project: https://github.com/inexorabletash/text-encoding
// Forked from https://github.com/DefinitelyTyped/DefinitelyTyped/blob/types-2.0/text-encoding/text-encoding.d.ts

class TextEncoder 
{
    constructor(label?: string, options?: TextEncoding.TextDecoderOptions);
    encoding: string;
    encode(input?: string, options?: TextEncoding.TextEncodeOptions): Uint8Array;
}

class TextDecoder
{
    constructor(utfLabel?: string, options?: TextEncoding.TextEncoderOptions)
    encoding: string;
    fatal: boolean;
    ignoreBOM: boolean;
    decode(input?: ArrayBufferView, options?: TextEncoding.TextDecodeOptions): string;
}

namespace TextEncoding 
{        
    interface TextDecoderOptions {
        fatal?: boolean;
        ignoreBOM?: boolean;
    }

    interface TextDecodeOptions {
        stream?: boolean;
    }

    interface TextEncoderOptions {
        NONSTANDARD_allowLegacyEncoding?: boolean;
    }

    interface TextEncodeOptions {
        stream?: boolean;
    }
    
    interface TextEncodingStatic {
        TextDecoder: typeof TextDecoder;
        TextEncoder: typeof TextEncoder;
    }
}

var TextEncoding: TextEncoding.TextEncodingStatic;

export = TextEncoding;
}
